import flixel.FlxG;
import flixel.FlxSprite;
import flixel.addons.display.FlxBackdrop;
import funkin.play.stage.Stage;
import funkin.play.PlayState;
import funkin.play.character.CharacterType;
import funkin.graphics.shaders.DropShadowShader;
import funkin.save.Save;

class LimoRideSpookyStage extends Stage
{
	function new()
	{
		super('limoRideSpooky');
	}

	var momX:Float = 0;
	var momY:Float = 0;

	var mist1:FlxBackdrop;
	var mist2:FlxBackdrop;
	var mist3:FlxBackdrop;
	var mist4:FlxBackdrop;
	var mist5:FlxBackdrop;

	var weird:FlxSprite;
	
	var sansed:Bool = false;

	function buildStage()
	{
		super.buildStage();

   	getNamedProp('moonlight').alpha = 0.17;
   	if (FlxG.save.data.spookyShaders != false) getNamedProp('moonlight').blend = 0;

    mist1 = new FlxBackdrop(Paths.image('limo/erect/mistMid'), 0x01);
		mist1.setPosition(-650, -100);
		mist1.scrollFactor.set(1.1, 1.1);
		mist1.zIndex = 400;
	if (FlxG.save.data.spookyShaders != false) mist1.blend = 0;
	else mist1.visible = false;
		mist1.color = 0xFF4F6F64;
		mist1.alpha = 0.4;
		mist1.velocity.x = 1700;

		PlayState.instance.currentStage.add(mist1);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist2 = new FlxBackdrop(Paths.image('limo/erect/mistBack'), 0x01);
		mist2.setPosition(-650, -100);
		mist2.scrollFactor.set(1.2, 1.2);
		mist2.zIndex = 401;
    if (FlxG.save.data.spookyShaders != false) mist2.blend = 0;
	else mist2.visible = false;
		mist2.color = 0xFF233032;
		mist2.alpha = 1;
		mist2.velocity.x = 2100;
		mist1.scale.set(1.3, 1.3);

		PlayState.instance.currentStage.add(mist2);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist3 = new FlxBackdrop(Paths.image('limo/erect/mistMid'), 0x01);
		mist3.setPosition(-650, -100);
		mist3.scrollFactor.set(0.8, 0.8);
		mist3.zIndex = 99;
   	if (FlxG.save.data.spookyShaders != false) mist3.blend = 0;
	else mist3.visible = false;
		mist3.color = 0xFFa7d9be;
		mist3.alpha = 0.5;
		mist3.velocity.x = 900;
		mist3.scale.set(1.5, 1.5);

		PlayState.instance.currentStage.add(mist3);
		PlayState.instance.currentStage.refresh(); // Apply z-index.


		mist4 = new FlxBackdrop(Paths.image('limo/erect/mistBack'), 0x01);
		mist4.setPosition(-650, -380);
		mist4.scrollFactor.set(0.6, 0.6);
		mist4.zIndex = 98;
    if (FlxG.save.data.spookyShaders != false) mist4.blend = 0;
	else mist4.visible = false;
		mist4.color = 0xFF658B7A;
		mist4.alpha = 1;
		mist4.velocity.x = 700;
		mist4.scale.set(1.5, 1.5);

		PlayState.instance.currentStage.add(mist4);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist5 = new FlxBackdrop(Paths.image('limo/erect/mistMid'), 0x01);
		mist5.setPosition(-650, -400);
		mist5.scrollFactor.set(0.2, 0.2);
		mist5.zIndex = 15;
   	if (FlxG.save.data.spookyShaders != false) mist5.blend = 0;
	else mist5.visible = false;
		mist5.color = 0xFF678D7B;
		mist5.alpha = 1;
		mist5.velocity.x = 100;
		mist5.scale.set(1.5, 1.5);

		PlayState.instance.currentStage.add(mist5);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		weird = new FlxSprite(-300, -50).loadGraphic(Paths.image('limo/spooky/BGtreeWeird'));
		weird.scrollFactor.set(0.3, 0.3);
		weird.alpha = 0;
		weird.zIndex = 12;
		PlayState.instance.currentStage.add(weird);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		sansed = false;

		runSansChance(true);

		resetBush();
		resetTree();
	}

	var _timer:Float = 0;

  function onUpdate(event:UpdateScriptEvent):Void
	{
		super.onUpdate(event);

		_timer += event.elapsed;
		mist1.y = 100 + (Math.sin(_timer)*200);
		mist2.y = 100 + (Math.sin(_timer*0.8)*100);
		mist3.y = 100 + (Math.sin(_timer*0.5)*200);
		mist4.y = 100 + (Math.sin(_timer*0.4)*300);
		mist5.y = 100 + (Math.sin(_timer*0.2)*150);
		//trace(mist1.y);

		if (getDad() != null)
		{
			if (momX == 0)
			{
				momX = getDad().x;
				momY = getDad().y;
			}

			getDad().x = momX + (Math.sin(_timer*1)*50);
			getDad().y = momY + (Math.sin(_timer*0.5)*50);
		}

		if (getNamedProp('tree').x >= 2000) resetTree();
		if (getNamedProp('bush').x >= 2000) resetBush();
	}

	override function addCharacter(character:BaseCharacter, charType:CharacterType):Void {
		// Apply the shader automatically to each character as it gets added.
		super.addCharacter(character, charType);
		if (FlxG.save.data.spookyShaders != false)
		{
			trace('Applied stage shader to ' + character.characterName);
		
			var rim = new DropShadowShader();
			character.shader = rim;
			rim.color = 0xFF426875;
			rim.attachedSprite = character;

			storeShader = rim;

			switch(charType){
				case CharacterType.BF:
					rim.setAdjustColor(-30, 13, 0, -30); //b, h, c, s
					rim.angle = 120;
					character.animation.onFrameChange.add(function() {
						if (getBoyfriend() != null)
						{
      						rim.updateFrameInfo(getBoyfriend().frame);
						}
    				});

				case CharacterType.DAD:
					rim.setAdjustColor(-11, -10, 0, -21); //b, h, c, s
					rim.angle = 60;
					character.animation.onFrameChange.add(function() {
						if (getDad() != null)
						{
      						rim.updateFrameInfo(getDad().frame);
						}
    				});

				case CharacterType.GF:
					rim.setAdjustColor(-28, -12, 0, -41); //b, h, c, s
					rim.angle = 90;
					character.animation.onFrameChange.add(function() {
						if (getGirlfriend() != null)
						{
      						rim.updateFrameInfo(getGirlfriend().frame);
						}
    				});

				default:

			}

		}

	}

	override function onGameOver(event:ScriptEvent):Void {
		super.onGameOver(event);
		
		getBoyfriend().shader = null;

		resetBush();
		resetTree();

		runSansChance(false);
	}
	
	function runSansChance(mustHaveBeatenSong:Bool):Void
	{
		if ((PlayState.instance.currentSong.id.toLowerCase() == "satin-panties" && Save.instance.hasBeatenSong(PlayState.instance.currentSong.id, null, 'spookymod') && mustHaveBeatenSong == true)
		|| (PlayState.instance.currentSong.id.toLowerCase() == "high" && FlxG.save.data.beatenNewHighUpdated == true && mustHaveBeatenSong == true)
		|| (PlayState.instance.currentSong.id.toLowerCase() == "milf" && FlxG.save.data.beatenMilfUpdated == true && mustHaveBeatenSong == true)
		|| (mustHaveBeatenSong == false))
		{
			var willSans:Int;
			var sansSkeleton:Int;

			willSans = FlxG.random.int(1, 100);

			if (willSans == 1 && sansed == false)
			{
				sansSkeleton = FlxG.random.int(1, 4);
				sansed = true;
			}

			if (sansSkeleton == 1)
				getNamedProp('limoDancer1').idleSuffix = '-sans';
			if (sansSkeleton == 2)
				getNamedProp('limoDancer2').idleSuffix = '-sans';
			if (sansSkeleton == 3)
				getNamedProp('limoDancer3').idleSuffix = '-sans';
			if (sansSkeleton == 4)
				getNamedProp('limoDancer4').idleSuffix = '-sans';
		}
	}

	/**
	 * Make sure the fast car is reset when the song restarts.
	 */
	function onSongRetry(event:ScriptEvent) {
		super.onSongRetry(event);
		resetBush();
		resetTree();
	}

	function onBeatHit(event:SongTimeScriptEvent)
	{
		// When overriding onBeatHit, make sure to call super.onBeatHit,
		// otherwise boppers will not work.
		super.onBeatHit(event);
		
		if (FlxG.random.int(1, 5) == 1 && treeCanGoBy)
			treePassesBy();

		if (FlxG.random.int(1, 3) == 1 && bushCanGoBy && !treeCanGoBy)
			bushPassesBy();
	}

	var bushCanGoBy:Bool = false;

	function resetBush():Void
	{
		var bush = getNamedProp('bush');

		var bushNumber:Int = FlxG.random.int(1, 3);

		if (bushNumber == 1) bush.loadGraphic(Paths.image('limo/spooky/FGbushDorothy'));
		if (bushNumber == 2) bush.loadGraphic(Paths.image('limo/spooky/FGbushStarbucks'));
		if (bushNumber == 3) bush.loadGraphic(Paths.image('limo/spooky/FGbushThomas'));

		if (bush == null)
			return;

		// Props are inactive by default.
		// Set active to true so position is calculated based on velocity.
		bush.active = true;

		bush.x = -6600;
		bush.velocity.x = 0;
		bushCanGoBy = true;
	}

	function bushPassesBy():Void
	{
		var bush = getNamedProp('bush');
		bush.velocity.x = 10000;
		bushCanGoBy = false;
	}

	var treeCanGoBy:Bool = false;

	function resetTree():Void
	{
		var tree = getNamedProp('tree');

		var treeNumber:Int = FlxG.random.int(1, 4);
		var weirdNumber:Int = FlxG.random.int(1, 50);
		
		if (weirdNumber == 1) weird.alpha = 1;
		else weird.alpha = 0;

		if (treeNumber == 1) tree.loadGraphic(Paths.image('limo/spooky/BGtreeDavid'));
		if (treeNumber == 2) tree.loadGraphic(Paths.image('limo/spooky/BGtreeFrank'));
		if (treeNumber == 3) tree.loadGraphic(Paths.image('limo/spooky/BGtreeHugo'));
		if (treeNumber == 3) tree.loadGraphic(Paths.image('limo/spooky/BGtreeTimothy'));

		if (tree == null)
			return;

		// Props are inactive by default.
		// Set active to true so position is calculated based on velocity.
		tree.active = true;
		weird.active = true;

		tree.x = -3600;
		tree.velocity.x = 0;
		weird.x = -3600;
		weird.velocity.x = 0;
		treeCanGoBy = true;
	}

	function treePassesBy():Void
	{
		var tree = getNamedProp('tree');
		tree.velocity.x = 5000;
		weird.velocity.x = 5000;
		treeCanGoBy = false;
	}

	/**
	 * If your stage uses additional assets not specified in the JSON,
	 * make sure to specify them like this, or they won't get cached in the loading screen.
	 */
	function fetchAssetPaths():Array<String>
	{
		var results:Array<String> = super.fetchAssetPaths();
		
		results.push(Paths.image('limo/spooky/FGbushDorothy'));
		results.push(Paths.image('limo/spooky/FGbushStarbucks'));
		results.push(Paths.image('limo/spooky/FGbushThomas'));

		results.push(Paths.image('limo/spooky/BGtreeDavid'));
		results.push(Paths.image('limo/spooky/BGtreeFrank'));
		results.push(Paths.image('limo/spooky/BGtreeHugo'));
		results.push(Paths.image('limo/spooky/BGtreeTimothy'));
		results.push(Paths.image('limo/spooky/BGtreeWeird'));

		return results;
	}

	/**
	 * Make sure the fast car is reset when the song restarts.
	 */
	function onCountdownStart(event:ScriptEvent) {
		super.onCountdownStart(event);
		resetBush();
		resetTree();
	}
}
