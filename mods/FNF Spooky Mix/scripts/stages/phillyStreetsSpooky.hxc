import StringTools;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxPoint;
import flixel.util.FlxTimer;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.addons.display.FlxTiledSprite;
import flixel.addons.display.FlxBackdrop;
import funkin.util.FlxTweenUtil;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.graphics.framebuffer.FixedBitmapData;
import funkin.graphics.shaders.AdjustColorShader;

class PhillyStreetsSpookyStage extends Stage
{
	var lightsStop:Bool = false; // state of the traffic lights
	var lastChange:Int = 0;
	var changeInterval:Int = 8; // make sure it doesnt change until AT LEAST this many beats

	var carWaiting:Bool = false; // if the car is waiting at the lights and is ready to go on green
	var carInterruptable:Bool = true; // if the car can be reset
	var car2Interruptable:Bool = true;

	var paperInterruptable:Bool = true;

	var scrollingSky:FlxTiledSprite;

	var colorShader:AdjustColorShader;
	var colorShaderDarnell:AdjustColorShader;

	var molochCandleGlow:FlxSprite;
	var DarnellPumpkinGlow:FlxSprite;

	function new()
	{
		super('phillyStreetsSpooky');
	}

	/**
  * Changes the current state of the traffic lights.
	* Updates the next change accordingly and will force cars to move when ready
  */
	function changeLights(beat:Int):Void{

		lastChange = beat;
		lightsStop = !lightsStop;

		if(lightsStop){
			getNamedProp('phillyTraffic').animation.play('tored');
			changeInterval = 20;
		} else {
			getNamedProp('phillyTraffic').animation.play('togreen');
			changeInterval = 30;

			if(carWaiting == true) finishCarLights(getNamedProp('phillyCars'));
		}
	}

	/**
  * Resets every value of a car and hides it from view.
  */
	function resetCar(left:Bool, right:Bool){
		if(left){
			carWaiting = false;
			carInterruptable = true;
			var cars = getNamedProp('phillyCars');
			if (cars != null) {
				FlxTween.cancelTweensOf(cars);
				cars.x = 1200;
				cars.y = 818;
				cars.angle = 0;
			}
		}

		if(right){
			car2Interruptable = true;
			var cars2 = getNamedProp('phillyCars2');
			if (cars2 != null) {
				FlxTween.cancelTweensOf(cars2);
				getNamedProp('phillyCars2').x = 1200;
				getNamedProp('phillyCars2').y = 818;
				getNamedProp('phillyCars2').angle = 0;
			}
		}
	}

	override function onCountdownStart(event:ScriptEvent) {
		super.onCountdownStart(event);

		resetCar(true, true);
		resetStageValues();
	}

	override function onCountdownEnd(event:ScriptEvent) {
		super.onCountdownEnd(event);
	}

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		resetCar(true, true);
		resetStageValues();
	}

	var mist0:FlxBackdrop;
	var mist1:FlxBackdrop;
	var mist2:FlxBackdrop;
	var mist3:FlxBackdrop;
	var mist4:FlxBackdrop;
	var mist5:FlxBackdrop;

	override function buildStage()
	{
		super.buildStage();

		scrollingSky = new FlxTiledSprite(Paths.image('phillyStreets/spooky/phillySkybox'), 2922, 718, true, false);
		scrollingSky.setPosition(-650, -375);
		scrollingSky.scrollFactor.set(0.1, 0.1);
		scrollingSky.zIndex = 10;
		scrollingSky.scale.set(0.65, 0.65);

		PlayState.instance.currentStage.add(scrollingSky);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		colorShader = new AdjustColorShader();
		colorShaderDarnell = new AdjustColorShader();

		mist0 = new FlxBackdrop(Paths.image('phillyStreets/erect/mistMid'), 0x01);
		mist0.setPosition(-650, -100);
		mist0.scrollFactor.set(1.2, 1.2);
		mist0.zIndex = 1000;
	if (FlxG.save.data.spookyShaders != false) mist0.blend = 0;
	else mist0.visible = false;
		mist0.color = 0xFF3E3341;
		mist0.alpha = 1;
		mist0.velocity.x = 172;

		PlayState.instance.currentStage.add(mist0);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist1 = new FlxBackdrop(Paths.image('phillyStreets/erect/mistMid'), 0x01);
		mist1.setPosition(-650, -100);
		mist1.scrollFactor.set(1.1, 1.1);
		mist1.zIndex = 1000;
	if (FlxG.save.data.spookyShaders != false) mist1.blend = 0;
	else mist1.visible = false;
		mist1.color = 0xFF3E3341;
		mist1.alpha = 1;
		mist1.velocity.x = 150;

		PlayState.instance.currentStage.add(mist1);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist2 = new FlxBackdrop(Paths.image('phillyStreets/erect/mistBack'), 0x01);
		mist2.setPosition(-650, -100);
		mist2.scrollFactor.set(1.2, 1.2);
		mist2.zIndex = 1001;
	if (FlxG.save.data.spookyShaders != false) mist2.blend = 0;
	else mist2.visible = false;
		mist2.color = 0xFF3E3341;
		mist2.alpha = 1;
		mist2.velocity.x = -80;

		PlayState.instance.currentStage.add(mist2);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist3 = new FlxBackdrop(Paths.image('phillyStreets/erect/mistMid'), 0x01);
		mist3.setPosition(-650, -100);
		mist3.scrollFactor.set(0.95, 0.95);
		mist3.zIndex = 99;
	if (FlxG.save.data.spookyShaders != false) mist3.blend = 0;
	else mist3.visible = false;
		mist3.color = 0xFF3E3341;
		mist3.alpha = 1;
		mist3.velocity.x = -50;
		mist3.scale.set(0.8, 0.8);

		PlayState.instance.currentStage.add(mist3);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist4 = new FlxBackdrop(Paths.image('phillyStreets/erect/mistBack'), 0x01);
		mist4.setPosition(-650, -100);
		mist4.scrollFactor.set(0.8, 0.8);
		mist4.zIndex = 88;
	if (FlxG.save.data.spookyShaders != false) mist4.blend = 0;
	else mist4.visible = false;
		mist4.color = 0xFF3E3341;
		mist4.alpha = 1;
		mist4.velocity.x = 40;
		mist4.scale.set(0.7, 0.7);

		PlayState.instance.currentStage.add(mist4);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		mist5 = new FlxBackdrop(Paths.image('phillyStreets/erect/mistMid'), 0x01);
		mist5.setPosition(-650, -100);
		mist5.scrollFactor.set(0.5, 0.5);
		mist5.zIndex = 39;
	if (FlxG.save.data.spookyShaders != false) mist5.blend = 0;
	else mist5.visible = false;
		mist5.color = 0xFF3E3341;
		mist5.alpha = 1;
		mist5.velocity.x = 20;
		mist5.scale.set(1.1, 1.1);

		PlayState.instance.currentStage.add(mist5);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		molochCandleGlow = new FlxSprite(0, 0);
		molochCandleGlow.frames = Paths.getSparrowAtlas('phillyStreets/spooky/molochCandleGlow');
		molochCandleGlow.animation.addByPrefix('idle', 'glowg');
		molochCandleGlow.animation.play('idle');
		molochCandleGlow.scrollFactor.set(1, 1);
		molochCandleGlow.zIndex = 301;
		if (FlxG.save.data.spookyShaders != false) molochCandleGlow.blend = 0;
   		molochCandleGlow.visible = false;
		PlayState.instance.currentStage.add(molochCandleGlow);
		PlayState.instance.currentStage.refresh(); // Apply z-index.

		DarnellPumpkinGlow = new FlxSprite(0, 0);
		DarnellPumpkinGlow.frames = Paths.getSparrowAtlas('phillyStreets/spooky/darnellGlow');
		DarnellPumpkinGlow.animation.addByPrefix('idle', 'glowIdle', 24, false);
		DarnellPumpkinGlow.animation.addByPrefix('1', 'glowDown', 24, false);
		DarnellPumpkinGlow.animation.addByPrefix('0', 'glowLeft', 24, false);
		DarnellPumpkinGlow.animation.addByPrefix('3', 'glowRight', 24, false);
		DarnellPumpkinGlow.animation.addByPrefix('2', 'glowUp', 24, false);
		DarnellPumpkinGlow.animation.play('idle');
		DarnellPumpkinGlow.scrollFactor.set(1, 1);
		DarnellPumpkinGlow.zIndex = 351;
   		if (FlxG.save.data.spookyShaders != false) DarnellPumpkinGlow.blend = 0;
   		DarnellPumpkinGlow.visible = false;
		PlayState.instance.currentStage.add(DarnellPumpkinGlow);
		PlayState.instance.currentStage.refresh(); // Apply z-index.
	}
	
	function onNoteHit(event:HitNoteScriptEvent)
	{
		if (!event.note.noteData.getMustHitNote())
		{
			DarnellPumpkinGlow.animation.reset();
			DarnellPumpkinGlow.animation.play(event.note.noteData.getDirection());
		}
	}

	override function onDestroy(event:ScriptEvent) {
		super.onDestroy();

		var cars = getNamedProp('phillyCars');
		if (cars != null) FlxTween.cancelTweensOf(cars);
		var cars2 = getNamedProp('phillyCars2');
		if (cars2 != null) FlxTween.cancelTweensOf(cars2);
	}

	/**
  * Drive the car away from the lights to the end of the road.
	* Used when the lights turn green and the car is waiting in position.
  */
	function finishCarLights(sprite:FlxSprite):Void{
		carWaiting = false;
		var duration:Float = FlxG.random.float(1.8, 3);
		var rotations:Array<Int> = [-5, 18];
		var offset:Array<Float> = [306.6, 168.3];
		var startdelay:Float = FlxG.random.float(0.2, 1.2);

		var path:Array<FlxPoint> = [
			FlxPoint.get(1950 - offset[0] - 80, 980 - offset[1] + 15),
			FlxPoint.get(2400 - offset[0], 980 - offset[1] - 50),
			FlxPoint.get(3102 - offset[0], 1127 - offset[1] + 40)
		];

		FlxTween.angle(sprite, rotations[0], rotations[1], duration, {ease: FlxEase.sineIn, startDelay: startdelay} );
		FlxTween.quadPath(sprite, path, duration, true,
    {
      ease: FlxEase.sineIn,
			startDelay: startdelay,
			onComplete: function(_) {
            carInterruptable = true;
      }
    });
	}

	/**
  * Drives a car towards the lights and stops.
	* Used when a car tries to drive while the lights are red.
  */
	function driveCarLights(sprite:FlxSprite):Void{
		carInterruptable = false;
		FlxTween.cancelTweensOf(sprite);
		var variant:Int = FlxG.random.int(1,4);
		sprite.animation.play('car' + variant);
		var extraOffset = [0, 0];
		var duration:Float = 2;

		switch(variant){
			case 1:
				duration = FlxG.random.float(1, 1.7);
			case 2:
				extraOffset = [20, -15];
				duration = FlxG.random.float(0.9, 1.5);
			case 3:
				extraOffset = [30, 50];
				duration = FlxG.random.float(1.5, 2.5);
			case 4:
				extraOffset = [10, 60];
				duration = FlxG.random.float(1.5, 2.5);
		}
		var rotations:Array<Int> = [-7, -5];
		var offset:Array<Float> = [306.6, 168.3];
		sprite.offset.set(extraOffset[0], extraOffset[1]);

		var path:Array<FlxPoint> = [
			FlxPoint.get(1500 - offset[0] - 20, 1049 - offset[1] - 20),
			FlxPoint.get(1770 - offset[0] - 80, 994 - offset[1] + 10),
			FlxPoint.get(1950 - offset[0] - 80, 980 - offset[1] + 15)
		];
		// debug shit!!! keeping it here just in case
		// for(point in path){
		// 	var debug:FlxSprite = new FlxSprite(point.x - 5, point.y - 5).makeGraphic(10, 10, 0xFFFF0000);
    // 	add(debug);
		// }
		FlxTween.angle(sprite, rotations[0], rotations[1], duration, {ease: FlxEase.cubeOut} );
		FlxTween.quadPath(sprite, path, duration, true,
    {
      ease: FlxEase.cubeOut,
			onComplete: function(_) {
            carWaiting = true;
						if(lightsStop == false) finishCarLights(getNamedProp('phillyCars'));
      }
    });
	}

	/**
  * Drives a car across the screen without stopping.
	* Used when the lights are green.
  */
	function driveCar(sprite:FlxSprite):Void{
		carInterruptable = false;
		FlxTween.cancelTweensOf(sprite);
		var variant:Int = FlxG.random.int(1,4);
		sprite.animation.play('car' + variant);
		// setting an offset here because the current implementation of stage prop offsets was not working at all for me
		// if possible id love to not have to do this but im keeping this for now
		var extraOffset = [0, 0];
		var duration:Float = 2;
		// set different values of speed for the car types (and the offset)
		switch(variant){
			case 1:
				duration = FlxG.random.float(1, 1.7);
			case 2:
				extraOffset = [20, -15];
				duration = FlxG.random.float(0.6, 1.2);
			case 3:
				extraOffset = [30, 50];
				duration = FlxG.random.float(1.5, 2.5);
			case 4:
				extraOffset = [10, 60];
				duration = FlxG.random.float(1.5, 2.5);
		}
		// random arbitrary values for getting the cars in place
		// could just add them to the points but im LAZY!!!!!!
		var offset:Array<Float> = [306.6, 168.3];
		sprite.offset.set(extraOffset[0], extraOffset[1]);
		// start/end rotation
		var rotations:Array<Int> = [-8, 18];
		// the path to move the car on
		var path:Array<FlxPoint> = [
				FlxPoint.get(1570 - offset[0], 1049 - offset[1] - 30),
				FlxPoint.get(2400 - offset[0], 980 - offset[1] - 50),
				FlxPoint.get(3102 - offset[0], 1127 - offset[1] + 40)
		];

		FlxTween.angle(sprite, rotations[0], rotations[1], duration, null );
		FlxTween.quadPath(sprite, path, duration, true,
      {
        ease: null,
				onComplete: function(_) {
      	  carInterruptable = true;
      	}
    });
	}

	function driveCarBack(sprite:FlxSprite):Void{
		car2Interruptable = false;
		FlxTween.cancelTweensOf(sprite);
		var variant:Int = FlxG.random.int(1,4);
		sprite.animation.play('car' + variant);
		// setting an offset here because the current implementation of stage prop offsets was not working at all for me
		// if possible id love to not have to do this but im keeping this for now
		var extraOffset = [0, 0];
		var duration:Float = 2;
		// set different values of speed for the car types (and the offset)
		switch(variant){
			case 1:
				duration = FlxG.random.float(1, 1.7);
			case 2:
				extraOffset = [20, -15];
				duration = FlxG.random.float(0.6, 1.2);
			case 3:
				extraOffset = [30, 50];
				duration = FlxG.random.float(1.5, 2.5);
			case 4:
				extraOffset = [10, 60];
				duration = FlxG.random.float(1.5, 2.5);
		}
		// random arbitrary values for getting the cars in place
		// could just add them to the points but im LAZY!!!!!!
		var offset:Array<Float> = [306.6, 168.3];
		sprite.offset.set(extraOffset[0], extraOffset[1]);
		// start/end rotation
		var rotations:Array<Int> = [18, -8];
		// the path to move the car on
		var path:Array<FlxPoint> = [
				FlxPoint.get(3102 - offset[0], 1127 - offset[1] + 60),
				FlxPoint.get(2400 - offset[0], 980 - offset[1] - 30),
				FlxPoint.get(1570 - offset[0], 1049 - offset[1] - 10)

		];

		FlxTween.angle(sprite, rotations[0], rotations[1], duration, null );
		FlxTween.quadPath(sprite, path, duration, true,
      {
        ease: null,
				onComplete: function(_) {
      	  car2Interruptable = true;
      	}
    });
	}

	/**
  * Resets the values tied to the lights that need to be accounted for on a restart.
  */
	function resetStageValues():Void{
		lastChange = 0;
		changeInterval = 8;
		var traffic = getNamedProp('phillyTraffic');
		if (traffic != null) {
			traffic.animation.play('togreen');
		}
		lightsStop = false;
	}

	var _timer:Float = 0;

	override function onUpdate(event:UpdateScriptEvent)
	{
		super.onUpdate(event);

		if (molochCandleGlow.visible == false && PlayState.instance.currentStage.getGirlfriend().characterId == "moloch" && FlxG.save.data.spookyShaders != false)
		{
			molochCandleGlow.x = PlayState.instance.currentStage.getGirlfriend().x + 115;
			molochCandleGlow.y = PlayState.instance.currentStage.getGirlfriend().y + 350;
			molochCandleGlow.zIndex = PlayState.instance.currentStage.getGirlfriend().zIndex + 1;
			PlayState.instance.currentStage.refresh(); // Apply z-index.
			molochCandleGlow.visible = true;
		}

		if (DarnellPumpkinGlow.visible == false && PlayState.instance.currentStage.getDad().characterId == "darnell-spooky")
		{
			DarnellPumpkinGlow.x = PlayState.instance.currentStage.getDad().x;
			DarnellPumpkinGlow.y = PlayState.instance.currentStage.getDad().y;
			DarnellPumpkinGlow.zIndex = PlayState.instance.currentStage.getDad().zIndex + 1;
			PlayState.instance.currentStage.refresh(); // Apply z-index.
			DarnellPumpkinGlow.visible = true;
		}

		_timer += event.elapsed;
		mist0.y = 660 + (Math.sin(_timer*0.35)*70);
		mist1.y = 500 + (Math.sin(_timer*0.3)*80);
		mist2.y = 540 + (Math.sin(_timer*0.4)*60);
		mist3.y = 230 + (Math.sin(_timer*0.3)*70);
		mist4.y = 170 + (Math.sin(_timer*0.35)*50);
		mist5.y = -80 + (Math.sin(_timer*0.08)*100);
		// mist3.y = -20 + (Math.sin(_timer*0.5)*200);
		// mist4.y = -180 + (Math.sin(_timer*0.4)*300);
		// mist5.y = -450 + (Math.sin(_timer*0.2)*1xxx50);
		//trace(mist1.y);

		if(scrollingSky != null) scrollingSky.scrollX -= FlxG.elapsed * 22;

		if(getBoyfriend() != null && getBoyfriend().shader == null)
		{
			if (FlxG.save.data.spookyShaders != false)
			{
				if(getBoyfriend() != null && getBoyfriend().shader == null)
				{
					getBoyfriend().shader = colorShader;
					getGirlfriend().shader = colorShader;
					getDad().shader = colorShaderDarnell;
				}
			}
			else
			{
				if(getBoyfriend() != null)
				{
					getBoyfriend().color = 0x8E7A93;
					getGirlfriend().color = 0x8E7A93;
					getDad().color = 0x8E7A93;
				}
			}
		  
			if (FlxG.save.data.spookyShaders != false)
			{
			  colorShader.brightness = -39;
			  colorShader.contrast = -7;
			  colorShader.saturation = -59;
			  colorShader.hue = -19;
		  
			  colorShaderDarnell.brightness = -39;
			  colorShaderDarnell.contrast = -7;
			  colorShaderDarnell.saturation = -68;
			  colorShaderDarnell.hue = 0;
			}
		}
	}

	function onBeatHit(event:SongTimeScriptEvent)
	{
		super.onBeatHit(event);

		// Try driving a car when its possible
		if (FlxG.random.bool(10) && event.beat != (lastChange + changeInterval) && carInterruptable == true)
		{
			if(lightsStop == false){
				driveCar(getNamedProp('phillyCars'));
			}else{
				driveCarLights(getNamedProp('phillyCars'));
			}
		}

		// var paper = getNamedProp('paper');
		// if (FlxG.random.bool(0.6) && paperInterruptable == true)
		// {
		// 	paper.alpha = 1;
		// 	paper.animation.play('paperBlow');
		// 	paper.y = 608 + FlxG.random.float(-150,150);
		// 	paperInterruptable = false;
		// 	new FlxTimer().start(2, function(tmr:FlxTimer)
		// 	{
		// 		paperInterruptable = true;
		// 		paper.alpha = 0;
		// 	});
		// }

		// try driving one on the right too. in this case theres no red light logic, it just can only spawn on green lights
		if(FlxG.random.bool(10) && event.beat != (lastChange + changeInterval) && car2Interruptable == true && lightsStop == false) driveCarBack(getNamedProp('phillyCars2'));

		// After the interval has been hit, change the light state.
		if (event.beat == (lastChange + changeInterval)) changeLights(event.beat);
	}

	override function setupFrameBuffers()
	{
		//frameBufferMan.createFrameBuffer("mask", 0xFF000000);
		//frameBufferMan.createFrameBuffer("lightmap", 0xFF000000);
	}

	var screen:FixedBitmapData;
	override function draw()
	{
		super.draw();

		//screen = grabScreen(false);
	}

	public override function onPause(event:PauseScriptEvent) {
		super.onPause(event);

		pauseCars();
	}

	public override function onResume(event:ScriptEvent) {
		super.onResume(event);

		resumeCars();
	}

	function pauseCars():Void {
		var cars = getNamedProp('phillyCars');
		if (cars != null) {
			FlxTweenUtil.pauseTweensOf(cars);
		}

		var cars2 = getNamedProp('phillyCars2');
		if (cars2 != null) {
			FlxTweenUtil.pauseTweensOf(cars2);
		}
	}

	function resumeCars():Void {
		var cars = getNamedProp('phillyCars');
		if (cars != null) {
			FlxTweenUtil.resumeTweensOf(cars);
		}

		var cars2 = getNamedProp('phillyCars2');
		if (cars2 != null) {
			FlxTweenUtil.resumeTweensOf(cars2);
		}
	}

	override function onGameOver(event:ScriptEvent):Void {
		super.onGameOver(event);
		
		if (FlxG.save.data.spookyShaders != false)
			getBoyfriend().shader = null;
		else
			getBoyfriend().color = 0xFFFFFF;
	}

	override function onSongRetry(event:ScriptEvent):Void {
		super.onSongRetry(event);

		resetCar(true, true);
		resetStageValues();
		
		DarnellPumpkinGlow.animation.play("idle");
		if (FlxG.save.data.spookyShaders != false)
			getBoyfriend().shader = colorShader;
		else
			getBoyfriend().color = 0x8E7A93;
	}

	override function addProp(prop:StageProp, ?name:String = null)
	{
		super.addProp(prop, name);
		if (StringTools.endsWith(name, "_lightmap"))
		{
			if (FlxG.save.data.spookyShaders != false) prop.blend = 0; // 0 means ADD (see openfl.display.BlendMode)
			prop.alpha = 0.6;
			//frameBufferMan.moveSpriteTo("lightmap", prop);
		}
		else if (name == "grey1")
		{
			//prop.blendMode = 5;
			//frameBufferMan.copySpriteTo("mask", prop, 0xFFFFFF);
		}
		else
		{
			//frameBufferMan.copySpriteTo("mask", prop, 0x000000);
		}
	}

  override function addCharacter(character:BaseCharacter, charType:CharacterType)
	{
		super.addCharacter(character, charType);
		// add to the mask so that characters hide puddles
		// frameBufferMan.copySpriteTo("mask", character, 0x000000);
	}
}
